{"version":3,"file":"static/js/5929.82c37ec8.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/calcite-color-picker-hex-input.js","../node_modules/@esri/calcite-components/dist/components/color-picker-hex-input.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.11.0\n */\nimport { e as ColorPickerHexInput, d as defineCustomElement$1 } from './color-picker-hex-input.js';\n\nconst CalciteColorPickerHexInput = ColorPickerHexInput;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { CalciteColorPickerHexInput, defineCustomElement };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.11.0\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client/index.js';\nimport { j as isLonghandHex, i as isValidHex, r as rgbToHex, n as normalizeHex, o as opacityToAlpha, h as hexify, k as hexChar, b as alphaToOpacity } from './utils.js';\nimport { c as color } from './index2.js';\nimport { k as focusElement } from './dom.js';\nimport { a as setUpLoadableComponent, s as setComponentLoaded, c as componentFocusable } from './loadable.js';\nimport { d as defineCustomElement$4 } from './icon.js';\nimport { d as defineCustomElement$3 } from './input-number.js';\nimport { d as defineCustomElement$2 } from './input-text.js';\nimport { d as defineCustomElement$1 } from './progress.js';\n\nconst CSS$1 = {\n  channel: \"channel\",\n  channels: \"channels\",\n  colorField: \"color-field\",\n  colorFieldScope: \"scope--color-field\",\n  colorMode: \"color-mode\",\n  colorModeContainer: \"color-mode-container\",\n  container: \"container\",\n  control: \"control\",\n  controlAndScope: \"control-and-scope\",\n  controlSection: \"control-section\",\n  deleteColor: \"delete-color\",\n  header: \"header\",\n  hexAndChannelsGroup: \"hex-and-channels-group\",\n  hexOptions: \"color-hex-options\",\n  hueScope: \"scope--hue\",\n  hueSlider: \"hue-slider\",\n  opacityScope: \"scope--opacity\",\n  opacitySlider: \"opacity-slider\",\n  preview: \"preview\",\n  previewAndSliders: \"preview-and-sliders\",\n  saveColor: \"save-color\",\n  savedColor: \"saved-color\",\n  savedColors: \"saved-colors\",\n  savedColorsButtons: \"saved-colors-buttons\",\n  savedColorsSection: \"saved-colors-section\",\n  scope: \"scope\",\n  section: \"section\",\n  slider: \"slider\",\n  sliders: \"sliders\",\n  splitSection: \"section--split\",\n};\nconst DEFAULT_COLOR$1 = color(\"#007AC2\");\nconst DEFAULT_STORAGE_KEY_PREFIX = \"calcite-color-\";\nconst RGB_LIMITS = {\n  r: 255,\n  g: 255,\n  b: 255,\n};\nconst HSV_LIMITS = {\n  h: 360,\n  s: 100,\n  v: 100,\n};\n// 0 and 360 represent the same value, so we limit the hue to 359\nconst HUE_LIMIT_CONSTRAINED = HSV_LIMITS.h - 1;\nconst OPACITY_LIMITS = {\n  min: 0,\n  max: 100,\n};\nconst DIMENSIONS = {\n  s: {\n    slider: {\n      height: 12,\n      width: 104,\n    },\n    colorField: {\n      height: 80,\n      width: 160,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n  m: {\n    slider: {\n      height: 12,\n      width: 204,\n    },\n    colorField: {\n      height: 150,\n      width: 272,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n  l: {\n    slider: {\n      height: 12,\n      width: 384,\n    },\n    colorField: {\n      height: 200,\n      width: 464,\n    },\n    thumb: {\n      radius: 10,\n    },\n  },\n};\nconst SCOPE_SIZE = 1;\n\nconst CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\",\n};\n\nconst colorPickerHexInputCss = \":host{display:block}.container{display:flex;inline-size:100%;flex-wrap:nowrap;align-items:center}.hex-input{flex-grow:1;text-transform:uppercase}.opacity-input{inline-size:68px;margin-inline-start:-1px}:host([scale=s]) .container{flex-wrap:wrap;row-gap:0.125rem}:host([scale=s]) .opacity-input{inline-size:unset;margin-inline-start:unset}:host([scale=l]) .opacity-input{inline-size:88px}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst DEFAULT_COLOR = color();\nconst ColorPickerHexInput = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calciteColorPickerHexInputChange = createEvent(this, \"calciteColorPickerHexInputChange\", 6);\n    this.onHexInputBlur = () => {\n      const node = this.hexInputNode;\n      const inputValue = node.value;\n      const hex = `#${inputValue}`;\n      const { allowEmpty, internalColor } = this;\n      const willClearValue = allowEmpty && !inputValue;\n      const isLonghand = isLonghandHex(hex);\n      // ensure modified pasted hex values are committed since we prevent default to remove the # char.\n      this.onHexInputChange();\n      if (willClearValue || (isValidHex(hex) && isLonghand)) {\n        return;\n      }\n      // manipulating DOM directly since rerender doesn't update input value\n      node.value =\n        allowEmpty && !internalColor\n          ? \"\"\n          : this.formatHexForInternalInput(rgbToHex(\n          // always display hex input in RRGGBB format\n          internalColor.object()));\n    };\n    this.onOpacityInputBlur = () => {\n      const node = this.opacityInputNode;\n      const inputValue = node.value;\n      const { allowEmpty, internalColor } = this;\n      const willClearValue = allowEmpty && !inputValue;\n      if (willClearValue) {\n        return;\n      }\n      // manipulating DOM directly since rerender doesn't update input value\n      node.value =\n        allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n    };\n    this.onHexInputChange = () => {\n      const nodeValue = this.hexInputNode.value;\n      let value = nodeValue;\n      if (value) {\n        const normalized = normalizeHex(value, false);\n        const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n        if (preserveExistingAlpha && this.internalColor) {\n          const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n          value = `${normalized + alphaHex}`;\n        }\n      }\n      this.internalSetValue(value, this.value);\n    };\n    this.onOpacityInputChange = () => {\n      const node = this.opacityInputNode;\n      let value;\n      if (!node.value) {\n        value = node.value;\n      }\n      else {\n        const alpha = opacityToAlpha(Number(node.value));\n        value = this.internalColor?.alpha(alpha).hexa();\n      }\n      this.internalSetValue(value, this.value);\n    };\n    this.onInputKeyDown = (event) => {\n      const { altKey, ctrlKey, metaKey, shiftKey } = event;\n      const { alphaChannel, hexInputNode, internalColor, value } = this;\n      const { key } = event;\n      const composedPath = event.composedPath();\n      if (key === \"Tab\" || key === \"Enter\") {\n        if (composedPath.includes(hexInputNode)) {\n          this.onHexInputChange();\n        }\n        else {\n          this.onOpacityInputChange();\n        }\n        if (key === \"Enter\") {\n          event.preventDefault();\n        }\n        return;\n      }\n      const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n      const oldValue = this.value;\n      if (isNudgeKey) {\n        if (!value) {\n          this.internalSetValue(this.previousNonNullValue, oldValue);\n          event.preventDefault();\n          return;\n        }\n        const direction = key === \"ArrowUp\" ? 1 : -1;\n        const bump = shiftKey ? 10 : 1;\n        this.internalSetValue(hexify(this.nudgeRGBChannels(internalColor, bump * direction, composedPath.includes(hexInputNode) ? \"rgb\" : \"a\"), alphaChannel), oldValue);\n        event.preventDefault();\n        return;\n      }\n      const withModifiers = altKey || ctrlKey || metaKey;\n      const singleChar = key.length === 1;\n      const validHexChar = hexChar.test(key);\n      if (singleChar && !withModifiers && !validHexChar) {\n        event.preventDefault();\n      }\n    };\n    this.onHexInputPaste = (event) => {\n      const hex = event.clipboardData.getData(\"text\");\n      if (isValidHex(hex)) {\n        event.preventDefault();\n        this.hexInputNode.value = hex.slice(1);\n      }\n    };\n    this.previousNonNullValue = this.value;\n    this.storeHexInputRef = (node) => {\n      this.hexInputNode = node;\n    };\n    this.storeOpacityInputRef = (node) => {\n      this.opacityInputNode = node;\n    };\n    this.allowEmpty = false;\n    this.alphaChannel = false;\n    this.hexLabel = \"Hex\";\n    this.messages = undefined;\n    this.numberingSystem = undefined;\n    this.scale = \"m\";\n    this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel), this.alphaChannel, true);\n    this.internalColor = DEFAULT_COLOR;\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    const { allowEmpty, alphaChannel, value } = this;\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n      return;\n    }\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n  componentWillLoad() {\n    setUpLoadableComponent(this);\n  }\n  componentDidLoad() {\n    setComponentLoaded(this);\n  }\n  handleValueChange(value, oldValue) {\n    this.internalSetValue(value, oldValue, false);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  render() {\n    const { alphaChannel, hexLabel, internalColor, messages, scale, value } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n    return (h(\"div\", { class: CSS.container }, h(\"calcite-input-text\", { class: CSS.hexInput, label: messages?.hex || hexLabel, maxLength: 6, onCalciteInputTextChange: this.onHexInputChange, onCalciteInternalInputTextBlur: this.onHexInputBlur, onKeyDown: this.onInputKeyDown, onPaste: this.onHexInputPaste, prefixText: \"#\", scale: inputScale, value: hexInputValue,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.storeHexInputRef }), alphaChannel ? (h(\"calcite-input-number\", { class: CSS.opacityInput, key: \"opacity-input\", label: messages?.opacity, max: OPACITY_LIMITS.max, maxLength: 3, min: OPACITY_LIMITS.min, numberButtonType: \"none\", numberingSystem: this.numberingSystem, onCalciteInputNumberChange: this.onOpacityInputChange, onCalciteInternalInputNumberBlur: this.onOpacityInputBlur, onKeyDown: this.onInputKeyDown, scale: inputScale, suffixText: \"%\", value: opacityInputValue,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.storeOpacityInputRef })) : null));\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n  /** Sets focus on the component. */\n  async setFocus() {\n    await componentFocusable(this);\n    return focusElement(this.hexInputNode);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  internalSetValue(value, oldValue, emit = true) {\n    if (value) {\n      const { alphaChannel } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        const { internalColor: currentColor } = this;\n        const nextColor = color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n        const changed = !currentColor ||\n          normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n        return;\n      }\n    }\n    else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n      return;\n    }\n    this.value = oldValue;\n  }\n  formatHexForInternalInput(hex) {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n  formatOpacityForInternalInput(color) {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n  nudgeRGBChannels(color$1, amount, context) {\n    let nudgedChannels;\n    const channels = color$1.array();\n    const rgbChannels = channels.slice(0, 3);\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map((channel) => channel + amount);\n      nudgedChannels = [\n        ...nudgedRGBChannels,\n        this.alphaChannel ? channels[3] : undefined,\n      ];\n    }\n    else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color$1.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha];\n    }\n    return color(nudgedChannels);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"value\": [\"handleValueChange\"]\n  }; }\n  static get style() { return colorPickerHexInputCss; }\n}, [1, \"calcite-color-picker-hex-input\", {\n    \"allowEmpty\": [4, \"allow-empty\"],\n    \"alphaChannel\": [4, \"alpha-channel\"],\n    \"hexLabel\": [1, \"hex-label\"],\n    \"messages\": [16],\n    \"numberingSystem\": [1, \"numbering-system\"],\n    \"scale\": [513],\n    \"value\": [1537],\n    \"internalColor\": [32],\n    \"setFocus\": [64]\n  }]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-color-picker-hex-input\", \"calcite-icon\", \"calcite-input-number\", \"calcite-input-text\", \"calcite-progress\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-color-picker-hex-input\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, ColorPickerHexInput);\n      }\n      break;\n    case \"calcite-icon\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$4();\n      }\n      break;\n    case \"calcite-input-number\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$3();\n      }\n      break;\n    case \"calcite-input-text\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$2();\n      }\n      break;\n    case \"calcite-progress\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$1();\n      }\n      break;\n  } });\n}\ndefineCustomElement();\n\nexport { CSS$1 as C, DEFAULT_COLOR$1 as D, HSV_LIMITS as H, OPACITY_LIMITS as O, RGB_LIMITS as R, SCOPE_SIZE as S, DIMENSIONS as a, HUE_LIMIT_CONSTRAINED as b, DEFAULT_STORAGE_KEY_PREFIX as c, defineCustomElement as d, ColorPickerHexInput as e };\n"],"names":["CalciteColorPickerHexInput","ColorPickerHexInput","defineCustomElement","defineCustomElement$1","CSS$1","channel","channels","colorField","colorFieldScope","colorMode","colorModeContainer","container","control","controlAndScope","controlSection","deleteColor","header","hexAndChannelsGroup","hexOptions","hueScope","hueSlider","opacityScope","opacitySlider","preview","previewAndSliders","saveColor","savedColor","savedColors","savedColorsButtons","savedColorsSection","scope","section","slider","sliders","splitSection","DEFAULT_COLOR$1","color","DEFAULT_STORAGE_KEY_PREFIX","RGB_LIMITS","r","g","b","HSV_LIMITS","h","s","v","HUE_LIMIT_CONSTRAINED","OPACITY_LIMITS","min","max","DIMENSIONS","height","width","thumb","radius","m","l","SCOPE_SIZE","CSS","DEFAULT_COLOR","proxyCustomElement","HTMLElement","constructor","super","this","__registerHost","__attachShadow","calciteColorPickerHexInputChange","createEvent","onHexInputBlur","node","hexInputNode","inputValue","value","hex","concat","allowEmpty","internalColor","willClearValue","isLonghand","isLonghandHex","onHexInputChange","isValidHex","formatHexForInternalInput","rgbToHex","object","onOpacityInputBlur","opacityInputNode","formatOpacityForInternalInput","normalized","normalizeHex","alphaChannel","alphaHex","hexa","slice","internalSetValue","onOpacityInputChange","_this$internalColor","alpha","opacityToAlpha","Number","onInputKeyDown","event","altKey","ctrlKey","metaKey","shiftKey","key","composedPath","includes","preventDefault","isNudgeKey","oldValue","previousNonNullValue","direction","bump","hexify","nudgeRGBChannels","withModifiers","singleChar","length","validHexChar","hexChar","test","onHexInputPaste","clipboardData","getData","storeHexInputRef","storeOpacityInputRef","hexLabel","messages","undefined","numberingSystem","scale","connectedCallback","componentWillLoad","setUpLoadableComponent","componentDidLoad","setComponentLoaded","handleValueChange","render","hexInputValue","opacityInputValue","inputScale","class","label","maxLength","onCalciteInputTextChange","onCalciteInternalInputTextBlur","onKeyDown","onPaste","prefixText","ref","opacity","numberButtonType","onCalciteInputNumberChange","onCalciteInternalInputNumberBlur","suffixText","setFocus","componentFocusable","focusElement","emit","arguments","currentColor","nextColor","normalizedLonghand","changed","replace","alphaToOpacity","color$1","amount","context","nudgedChannels","array","rgbChannels","map","nudgedAlpha","el","watchers","style","customElements","forEach","tagName","get","define","defineCustomElement$4","defineCustomElement$3","defineCustomElement$2"],"sourceRoot":""}